(function (React$1, ReactDOM, d3$1) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const jsonURL =
    "https://gist.githubusercontent.com/aulichney/d4589c85658f1a2248b143dfd62005b4/raw/3b10ecd311754f3c2234d6c880622d33ad7d176f/undercustodymod.json";

  // helper function; clean the data
  function cleanData(row) {
    return {
      sex: row.sex,
      age: Number(row.age),
      raceEthnicity: row.raceEthnicity,
      timeServed: row.timeServed
    };
  }

  // Given the JSON data and a specified column name,
  // group by the column, compute the value counts and the average age
  function transformData(data, col) {
    let transformed = d3
      .nest()
      .key((d) => d[col])
      .rollup((d) => {
        return {
          amount: d.length,
          ageAvg: d3.mean(d.map((correspondent) => correspondent.age)),
          avgTimeServed: d3.mean(d.map(function (correspondent) {return correspondent.timeServed; }))
        };
      })
      .entries(data);
    return transformed;
  }

  // main function; retrieve the data from the JSON file
  const useJSON = () => {
    const [data, setData] = React$1.useState(null);
    React$1.useEffect(() => {
      d3.json(jsonURL) // retrieve data from the given URL
        .then(function (data) {
          //when data is retrieved, do the following
          data = data.map(cleanData); // map each row to the cleanData function to retrieve the desired columns
          setData(data);
          // use the react hook to set the data
        });
    }, []);
    return data;
  };

  const Dropdown = ({ options, id, selectedValue, onSelectedValueChange }) => (
    React.createElement( 'select', { id: id, onChange: event => onSelectedValueChange(event.target.value) },
      options.map(({ value, label }) => (
        React.createElement( 'option', { value: value, selected: value === selectedValue },
          label
        )
      ))
    )
  );

  // bar constants 
  const WIDTH = 500;
  const HEIGHT= 300;
  const margin={top: 25, right: 25, bottom: 50, left: 50};
  const innerWidth = WIDTH - margin.left - margin.right;
  const innerHeight = HEIGHT - margin.top - margin.bottom;


  //sort constant, 'none'; 'height': sort by height descendant; 'x': sort by x value
  let sorted = 'none'; 
  const SORT_DURATION = 500;

  const Svg = (ref) => {
    // the temporary solution is this, prevent react from appending svgs indefinitely
    	if (d3.selectAll("svg").empty()) {
        d3.select(ref)
          .append("svg")
          .attr("width", WIDTH)
          .attr("height", HEIGHT);
      }
  };


  const Bar = (ref_radio, barData, yAttribute) => {
    	console.log(barData.length);
  		const barAdjust = 5 / barData.length; // for adjusting the width of bars
    
      const svg = d3.select("svg");

      // remove everything from svg and rerender objects
      svg.selectAll("*").remove();  

      // draw axes
      const xScale = d3.scaleBand()
                     .domain(barData.map(d => d.key))
                     .range([0, innerWidth])
                     .paddingInner([.2]);
      const yScale = d3.scaleLinear()
                     .domain([0, d3.max( barData.map(d => d.value[yAttribute]) )] )
                     .range([innerHeight, 0]);

      const xAxis = d3.axisBottom().scale(xScale);
      const yAxis = d3.axisLeft().scale(yScale);

      svg.append("g")
        .attr("class", "xAxis")
        .attr("transform", `translate (${margin.left}, ${HEIGHT - margin.bottom})`)
        .call(xAxis);
      svg.append("g")
        .attr("class", "yAxis")
        .attr("transform", `translate (${margin.left}, ${margin.top})`)
        .call(yAxis);

      // draw initial bars
      const bars = svg.append('g')
                        .attr("transform", `translate (${margin.left}, ${margin.top})`)
                        .selectAll("rect")
                        .data(barData, d => d.key);
      bars.enter().append("rect")
        .attr("x", (d, i) => xScale(d.key)+barAdjust)
        .attr("y", d => yScale(d.value[yAttribute]))
        .attr("width", xScale.bandwidth()-barAdjust*2)
        .attr("height", d => innerHeight - yScale(d.value[yAttribute]))
        .style('opacity', 0.7)
    		.on("mouseover", function(d){
  				d3.select(this)
    				.style("opacity", 1);
  			}).on("mouseout", function(d){
  				d3.select(this)
    				.style("opacity", 0.7);
  			});
        
    	// radio button calls sort function on click 
    	d3.select(ref_radio)
      .selectAll("input")
      .on("click", sort);
    
      //if sorted=='height'
      if (sorted == 'height') {
      const new_data = barData.slice()
                    .sort((a,b) => d3.ascending(b.value[yAttribute], a.value[yAttribute]));
      change_data(new_data, 0);
      } else if (sorted == 'x') { //if sorted=='x'
      const new_data = barData.slice().sort((a,b) => d3.ascending(a.key, b.key));
      change_data(new_data, 0);      
      }
  	
    
    function change_data(new_data, duration, delay=0) {
      //change the axis generator
      xScale.domain(new_data.map(d => d.key));
      svg.select(".xAxis")
      .transition().duration(duration).ease(d3.easeLinear)
      .call(xAxis);
      
      // change bars
      const bars = svg.selectAll("rect").data(new_data, d => d.key);
      bars.transition().delay(delay).duration(duration).ease(d3.easeLinear)
            .attr("x", (d, i) => xScale(d.key)+barAdjust)
            .attr("y", d => yScale(d.value[yAttribute]))
            .attr("width", xScale.bandwidth()-barAdjust*2)
            .attr("height", d => innerHeight - yScale(d.value[yAttribute]));
  	}
    function sort() {
      let action = d3.select(this).node().value;
      
      if (action == "height"){
        const new_data = barData.slice().sort((a,b) => d3.ascending(b.value[yAttribute], a.value[yAttribute]));
        change_data(new_data, SORT_DURATION);
        sorted = 'height';
      } else {
        const new_data = barData.slice().sort((a,b) => d3.ascending(a.key, b.key));
        change_data(new_data, SORT_DURATION);
        sorted = 'x';
      }  
    }};



  const Chart = ( {rawData} ) => {
    
    // create React hooks for controlling the grouped data we want to generate; also, setup the initial value 
    const [xAttribute, setXAttribute] = React$1.useState('sex');
    const [yAttribute, setYAttribute] = React$1.useState('amount');
    
    // according to the current xAttr ibute, group by that attribute and compute the number of observations and the average age
    const barData = transformData(rawData, xAttribute);
    
    // console.log(barData)

    // map each column to { value: col, label: col } to feed into react Dropdown menu 
    const xFields = Object.keys(rawData[0]).map(d => ({"value":d, "label":d}));

    const yFields = Object.keys(barData[0].value).map(d => ({"value":d, "label":d}));

    // return the title, the dropdown menus, and the barplot with axes  
  	return(
      React.createElement( React.Fragment, null,
        React.createElement( 'h1', { ref: d => Svg(d) }, " Under Custody Data Visualization with Filters"),
  			
        React.createElement( 'label', { for: "x-select" }, "X:"),
        React.createElement( Dropdown, {
          options: xFields, id: "x-select", selectedValue: xAttribute, onSelectedValueChange: setXAttribute }),
        React.createElement( 'label', { for: "y-select" }, "Y:"),
        React.createElement( Dropdown, {
          options: yFields, id: "y-select", selectedValue: yAttribute, onSelectedValueChange: setYAttribute }),     

        
        React.createElement( 'div', { id: 'radio_sort', ref: d => Bar(d, barData, yAttribute) },
          React.createElement( 'input', { type: "radio", value: "height", name: "sort" }), " Sort by Height ", React.createElement( 'input', { type: "radio", value: "other", name: "sort" }), " Sort by X Value") 
  		)
  	);
  };

  const App = () => {
    const rawData = useJSON();

    if (!rawData) {
      return React$1__default.createElement( 'h2', null, "Loading..." );
    }

    // console.log(rawData);

    return (
      React$1__default.createElement( React$1__default.Fragment, null,
        React$1__default.createElement( Chart, { rawData: rawData })
      )
    );
  };

  const rootElement = document.getElementById("root");
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,